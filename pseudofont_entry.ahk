mono      := 1
script_r  := 3
script_b  := 5
double    := 7
fraktur_r := 9
fraktur_b := 11
a := ["𝙰", "𝚊", "𝒜", "𝒶", "𝓐", "𝓪", "𝔸", "𝕒", "𝔄", "𝔞", "𝕬", "𝖆"]
b := ["𝙱", "𝚋", "ℬ", "𝒷", "𝓑", "𝓫", "𝔹", "𝕓", "𝔅", "𝔟", "𝕭", "𝖇"]
c := ["𝙲", "𝚌", "𝒞", "𝒸", "𝓒", "𝓬", "ℂ", "𝕔", "ℭ", "𝔠", "𝕮", "𝖈"]
d := ["𝙳", "𝚍", "𝒟", "𝒹", "𝓓", "𝓭", "𝔻", "𝕕", "𝔇", "𝔡", "𝕯", "𝖉"]
e := ["𝙴", "𝚎", "ℰ", "ℯ", "𝓔", "𝓮", "𝔼", "𝕖", "𝔈", "𝔢", "𝕰", "𝖊"]
f := ["𝙵", "𝚏", "ℱ", "𝒻", "𝓕", "𝓯", "𝔽", "𝕗", "𝔉", "𝔣", "𝕱", "𝖋"]
g := ["𝙶", "𝚐", "𝒢", "ℊ", "𝓖", "𝓰", "𝔾", "𝕘", "𝔊", "𝔤", "𝕲", "𝖌"]
h := ["𝙷", "𝚑", "ℋ", "𝒽", "𝓗", "𝓱", "ℍ", "𝕙", "ℌ", "𝔥", "𝕳", "𝖍"]
i := ["𝙸", "𝚒", "ℐ", "𝒾", "𝓘", "𝓲", "𝕀", "𝕚", "ℑ", "𝔦", "𝕴", "𝖎"]
j := ["𝙹", "𝚓", "𝒥", "𝒿", "𝓙", "𝓳", "𝕁", "𝕛", "𝔍", "𝔧", "𝕵", "𝖏"]
k := ["𝙺", "𝚔", "𝒦", "𝓀", "𝓚", "𝓴", "𝕂", "𝕜", "𝔎", "𝔨", "𝕶", "𝖐"]
l := ["𝙻", "𝚕", "ℒ", "𝓁", "𝓛", "𝓵", "𝕃", "𝕝", "𝔏", "𝔩", "𝕷", "𝖑"]
m := ["𝙼", "𝚖", "ℳ", "𝓂", "𝓜", "𝓶", "𝕄", "𝕞", "𝔐", "𝔪", "𝕸", "𝖒"]
n := ["𝙽", "𝚗", "𝒩", "𝓃", "𝓝", "𝓷", "ℕ", "𝕟", "𝔑", "𝔫", "𝕹", "𝖓"]
o := ["𝙾", "𝚘", "𝒪", "ℴ", "𝓞", "𝓸", "𝕆", "𝕠", "𝔒", "𝔬", "𝕺", "𝖔"]
p := ["𝙿", "𝚙", "𝒫", "𝓅", "𝓟", "𝓹", "ℙ", "𝕡", "𝔓", "𝔭", "𝕻", "𝖕"]
q := ["𝚀", "𝚚", "𝒬", "𝓆", "𝓠", "𝓺", "ℚ", "𝕢", "𝔔", "𝔮", "𝕼", "𝖖"]
r := ["𝚁", "𝚛", "ℛ", "𝓇", "𝓡", "𝓻", "ℝ", "𝕣", "ℜ", "𝔯", "𝕽", "𝖗"]
s := ["𝚂", "𝚜", "𝒮", "𝓈", "𝓢", "𝓼", "𝕊", "𝕤", "𝔖", "𝔰", "𝕾", "𝖘"]
t := ["𝚃", "𝚝", "𝒯", "𝓉", "𝓣", "𝓽", "𝕋", "𝕥", "𝔗", "𝔱", "𝕿", "𝖙"]
u := ["𝚄", "𝚞", "𝒰", "𝓊", "𝓤", "𝓾", "𝕌", "𝕦", "𝔘", "𝔲", "𝖀", "𝖚"]
v := ["𝚅", "𝚟", "𝒱", "𝓋", "𝓥", "𝓿", "𝕍", "𝕧", "𝔙", "𝔳", "𝖁", "𝖛"]
w := ["𝚆", "𝚠", "𝒲", "𝓌", "𝓦", "𝔀", "𝕎", "𝕨", "𝔚", "𝔴", "𝖂", "𝖜"]
x := ["𝚇", "𝚡", "𝒳", "𝓍", "𝓧", "𝔁", "𝕏", "𝕩", "𝔛", "𝔵", "𝖃", "𝖝"]
y := ["𝚈", "𝚢", "𝒴", "𝓎", "𝓨", "𝔂", "𝕐", "𝕪", "𝔜", "𝔶", "𝖄", "𝖞"]
z := ["𝚉", "𝚣", "𝒵", "𝓏", "𝓩", "𝔃", "ℤ", "𝕫", "ℨ", "𝔷", "𝖅", "𝖟"]
zero    := ["𝟶", "𝟶", "0", "0", "0", "0", "𝟘", "𝟘", "0", "0", "0", "0"]
one     := ["𝟷", "𝟷", "1", "1", "1", "1", "𝟙", "𝟙", "1", "1", "1", "1"]
two     := ["𝟸", "𝟸", "2", "2", "2", "2", "𝟚", "𝟚", "2", "2", "2", "2"]
three   := ["𝟹", "𝟹", "3", "3", "3", "3", "𝟛", "𝟛", "3", "3", "3", "3"]
four    := ["𝟺", "𝟺", "4", "4", "4", "4", "𝟜", "𝟜", "4", "4", "4", "4"]
five    := ["𝟻", "𝟻", "5", "5", "5", "5", "𝟝", "𝟝", "5", "5", "5", "5"]
six     := ["𝟼", "𝟼", "6", "6", "6", "6", "𝟞", "𝟞", "6", "6", "6", "6"]
seven   := ["𝟽", "𝟽", "7", "7", "7", "7", "𝟟", "𝟟", "7", "7", "7", "7"]
eight   := ["𝟾", "𝟾", "8", "8", "8", "8", "𝟠", "𝟠", "8", "8", "8", "8"]
nine    := ["𝟿", "𝟿", "9", "9", "9", "9", "𝟡", "𝟡", "9", "9", "9", "9"]
letters   := Object("a",a,"b",b,"c",c,"d",d,"e",e,"f",f,"g",g,"h",h
,"i",i,"j",j,"k",k,"l",l,"m",m,"n",n,"o",o,"p",p
,"q",q,"r",r,"s",s,"t",t,"u",u,"v",v,"w",w,"x",x
,"y",y,"z",z,0,zero,1,one,2,two,3,three
,4,four,5,five,6,six,7,seven,8,eight,9,nine)

translate(idx) {
    global letters
    Loop {
        Input, key, L1, {Backspace}{Esc}{Delete}{Up}{Down}{Left}{Right}
        if (InStr(ErrorLevel, "EndKey") == 1)
            break
        if letters.HasKey(key) {
            add := 0
            if key is lower
                add++
            SendInput % letters[key][idx + add]
            }
        else
            SendInput % "{Raw}" . key
    }
}

:?:`;ms::
    translate(mono)
    return

:?:`;sr::
    translate(script_r)
    return

:?:`;sb::
    translate(script_b)
    return

:?:`;ds::
    translate(double)
    return

:?:`;fr::
    translate(fraktur_r)
    return

:?:`;fb::
    translate(fraktur_b)
    return